import 'package:flutter/material.dart';
import 'package:front_client/models/model_specialist.dart';
import 'package:front_client/screens/orders/page_specialist_profile.dart';
import 'package:front_client/screens/orders/page_service_order.dart';
import 'package:front_client/services/service_specialist.dart';

class SpecialistSelectionPage extends StatefulWidget {
  final DateTime? selectedDate;
  final TimeOfDay? selectedTime;
  final List<int>? selectedChildren;
  final String? description;
  final String? serviceType;
  final double totalCost;

  const SpecialistSelectionPage({
    this.selectedDate,
    this.selectedTime,
    this.selectedChildren,
    this.description,
    this.serviceType,
    required this.totalCost,
  });

  @override
  _SpecialistSelectionPageState createState() =>
      _SpecialistSelectionPageState();
}

class _SpecialistSelectionPageState extends State<SpecialistSelectionPage> {
  List<Specialist> specialists = [];
  List<Specialist> filteredSpecialists = [];
  final SpecialistService _specialistService = SpecialistService();
  TextEditingController searchController = TextEditingController();

  bool get hasOrderDetails =>
      widget.selectedDate != null &&
      widget.selectedTime != null &&
      widget.selectedChildren != null &&
      widget.selectedChildren!.isNotEmpty &&
      widget.description != null &&
      widget.description!.isNotEmpty &&
      widget.serviceType != null &&
      widget.totalCost > 0;

  @override
  void initState() {
    super.initState();
    _fetchSpecialists();
    searchController.addListener(_filterSpecialists);
  }

  Future<void> _fetchSpecialists() async {
    try {
      specialists = await _specialistService.fetchSpecialists();
      setState(() {
        filteredSpecialists = specialists;
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error fetching specialists: $e')),
        );
      }
    }
  }

  void _filterSpecialists() {
    final query = searchController.text.toLowerCase();
    setState(() {
      filteredSpecialists = specialists
          .where((s) => s.name.toLowerCase().contains(query))
          .toList();
    });
  }

  @override
  void dispose() {
    searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Select Specialist'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8),
            child: TextField(
              controller: searchController,
              decoration: const InputDecoration(
                hintText: 'Search specialists...',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(),
              ),
            ),
          ),
          Expanded(
            child: filteredSpecialists.isEmpty
                ? const Center(child: Text('No specialists available'))
                : ListView.builder(
                    itemCount: filteredSpecialists.length,
                    itemBuilder: (context, index) {
                      final specialist = filteredSpecialists[index];
                      return ListTile(
                        title: Text(specialist.name),
                        subtitle: Row(
                          children: [
                            const Icon(Icons.star,
                                size: 16, color: Colors.amber),
                            const SizedBox(width: 4),
                            Text(specialist.rating.toString()),
                          ],
                        ),
                        onTap: () async {
                          if (hasOrderDetails) {
                            // Open profile with all order details, ready to create order
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (_) => SpecialistProfilePage(
                                  specialist: specialist,
                                  isOrderFlow: true,
                                  selectedDate: widget.selectedDate,
                                  selectedTime: widget.selectedTime,
                                  selectedChildren: widget.selectedChildren,
                                  orderDescription: widget.description,
                                  serviceType: widget.serviceType,
                                  totalCost: widget.totalCost,
                                ),
                              ),
                            );
                          } else {
                            // Start order details flow: open order creation, preselect specialist!
                            final result = await Navigator.push<Map<String, dynamic>>(
                              context,
                              MaterialPageRoute(
                                builder: (_) => ServiceDetailsPage(
                                  serviceName: '',
                                  preselectedSpecialist: specialist,
                                ),
                              ),
                            );
                            // After filling order, user comes back to this specialist's profile
                            if (result != null &&
                                result['selectedDate'] != null &&
                                result['selectedTime'] != null &&
                                result['selectedChildren'] != null &&
                                result['orderDescription'] != null &&
                                result['serviceType'] != null &&
                                result['totalCost'] != null) {
                              Navigator.pushReplacement(
                                context,
                                MaterialPageRoute(
                                  builder: (_) => SpecialistProfilePage(
                                    specialist: specialist,
                                    isOrderFlow: true,
                                    selectedDate: result['selectedDate'],
                                    selectedTime: result['selectedTime'],
                                    selectedChildren: result['selectedChildren'],
                                    orderDescription: result['orderDescription'],
                                    serviceType: result['serviceType'],
                                    totalCost: result['totalCost'],
                                  ),
                                ),
                              );
                            }
                          }
                        },
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }
}
